@page "/ShoppingLists"

@namespace Zdk.Client

@inject HttpClient Http

@inherits AuthenticatedBase
@implements IAsyncDisposable

<h3 @onclick="() => _shoppingList = null">Shopping lists</h3>

@if (_groups is not null)
{
    <GroupSelect Groups="_groups" @bind-Group="SessionGroup" OnChanged="ChangeGroup" />
}

@if (_shoppingList is not null)
{
    <button @onclick="() => _shoppingList = null">Go back</button>
    <ItemsComponent @bind-ShoppingList="_shoppingList" @bind-NewItem="_newItem" Update="UpdateItem" Delete="DeleteItem" OnSubmit="SendItem" />
}
else if (_shoppingLists is not null)
{
    <ShoppingListsComponent ShoppingLists="_shoppingLists" @bind-ShoppingList="_shoppingList" @bind-NewShoppingList="_newShoppingList" Delete="DeleteList" OnSubmit="SendList" />
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Group>? _groups;
    private List<ShoppingList> _shoppingLists = new List<ShoppingList>();
    private ShoppingList? _shoppingList;
    private ShoppingList _newShoppingList = new();
    private UserSession? _session;
    private Item _newItem = new();
    private HubConnection? _shoppingListHubConnection;
    private HubConnection? _userHubConnection;

    private List<ShoppingList> _listsToSend = new List<ShoppingList>();
    private List<Item> _itemsToSend = new List<Item>();

    private int SessionGroup
    {
        get => _session.GroupId;
        set
        {
            _session.GroupId = value;
        }
    }

    private bool IsConnectedSl =>
        _shoppingListHubConnection != null &&
        _shoppingListHubConnection.State == HubConnectionState.Connected;

    private bool IsConnectedU =>
        _userHubConnection != null &&
        _userHubConnection.State == HubConnectionState.Connected;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        try
        {
            _shoppingListHubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/{ShoppingListsHubMethodNames.HubName}"))
                .WithAutomaticReconnect()
                .Build();

            _shoppingListHubConnection.On<List<ShoppingList>>(ShoppingListsHubMethodNames.ReceiveData, (list) =>
            {
                _shoppingLists = list;

                if (_shoppingList is not null)
                {
                    _shoppingList = _shoppingLists.Find(e => e.ShoppingListId == _shoppingList.ShoppingListId) ?? null;
                }
                Console.WriteLine($"Received lists");

                StateHasChanged();
            });

            _shoppingListHubConnection.Reconnected += ShoppingListHubConnectionOnReconnected;

            await _shoppingListHubConnection.StartAsync();

            _userHubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri($"/{UserManagementHubMethodNames.HubName}"))
                .WithAutomaticReconnect()
                .Build();

            _userHubConnection.On<List<Group>>(UserManagementHubMethodNames.GetGroups, (list) =>
            {
                _groups = list;
                Console.WriteLine($"Received groups");

                StateHasChanged();
            });

            _userHubConnection.On<UserSession>(UserManagementHubMethodNames.GetUserSession, async (s) =>
            {
                _session = s;
                await JoinClientGroup();

                await GetLists();

                StateHasChanged();
            });

            await _userHubConnection.StartAsync();

            _newItem.Amount = 1;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (HttpRequestException exception)
        {
            if (exception.StatusCode == HttpStatusCode.Unauthorized)
            {
                // NavigationManager.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(NavigationManager.Uri)}");
            }
        }
    }

    private async Task ShoppingListHubConnectionOnReconnected(string? arg)
    {
        await SendLists();
        await SendItems();
    }

    private async Task ChangeGroup(object? value)
    {
        Console.WriteLine($"value is: {value} - type: {value.GetType()}");
        await LeaveClientGroup();

        _session.GroupId = Int32.Parse((string)value);

        await UpdateUserSession();
    }

    private async Task GetLists()
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.ListShoppingLists);
            Console.WriteLine($"Getting lists");
        }
    }

    private async Task SendList()
    {
        _newShoppingList.Items = new List<Item>();
        _listsToSend.Add(_newShoppingList);

        await SendLists();

        if (!IsAuthenticated() || !IsConnectedSl)
        {
            _shoppingLists = _listsToSend;
        }

        _newShoppingList = new ShoppingList();
    }

    private async Task SendLists()
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            foreach (var list in _listsToSend)
            {
                await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.SendShoppingList, list);
            }

            _listsToSend.Clear();
        }
    }

    private async Task SendItem()
    {
        _newItem.ShoppingListId = _shoppingList.ShoppingListId;

        _shoppingList.Items.Add(_newItem);
        _itemsToSend.Add(_newItem);

        await SendItems();

        _newItem = new Item();
        _newItem.Amount = 1;
    }

    private async Task SendItems()
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            foreach (var item in _itemsToSend)
            {
                await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.SendItem, item);
            }
        }
    }

    private async Task UpdateList(ShoppingList list)
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.UpdateShoppingList, list);
        }
    }

    private async Task UpdateItem(Item item)
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.UpdateItem, item);
        }
    }

    private async Task DeleteList(ShoppingList list)
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.DeleteShoppingList, list);
        }
    }

    private async Task DeleteItem(Item item)
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ShoppingListsHubMethodNames.DeleteItem, item);
        }
    }

    private async Task UpdateUserSession()
    {
        if (IsConnectedU && IsAuthenticated())
        {
            await _userHubConnection!.SendAsync(UserManagementHubMethodNames.UpdateUserSession, _session);
            Console.WriteLine($"Getting session");
        }
    }

    private async Task JoinClientGroup()
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ClientGroupMethodNames.JoinGroup);
        }

        if (IsConnectedU && IsAuthenticated())
        {
            await _userHubConnection!.SendAsync(ClientGroupMethodNames.JoinGroup);
        }
    }

    private async Task LeaveClientGroup()
    {
        if (IsConnectedSl && IsAuthenticated())
        {
            await _shoppingListHubConnection!.SendAsync(ClientGroupMethodNames.LeaveGroup, _session.GroupId);
        }

        if (IsConnectedU && IsAuthenticated())
        {
            await _userHubConnection!.SendAsync(ClientGroupMethodNames.LeaveGroup, _session.GroupId);
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_shoppingListHubConnection is not null)
        {
            _shoppingListHubConnection.Reconnected -= ShoppingListHubConnectionOnReconnected;
            await _shoppingListHubConnection.DisposeAsync();
        }

        if (_userHubConnection is not null)
        {
            await _userHubConnection.DisposeAsync();
        }
    }
}
