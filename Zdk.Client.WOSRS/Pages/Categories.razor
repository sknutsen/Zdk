@page "/categories"
@namespace Zdk.Client.WOSRS
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject HttpClient Http

@if (Editing)
{
    <h3>
        Editing
        <button class="btn btn-primary" @onclick="() => Editing = false">Go back</button>
    </h3>

    <hr />

    <CategoryEditor @bind-SelectedCategory="selectedCategory" Func="UpdateCategory" Items="items" />
}
else if (Creating)
{
    <h3>
        Creating
        <button class="btn btn-primary" @onclick="() => Creating = false">Go back</button>
    </h3>

    <hr />

    <CategoryCreator @bind-NewCategory="category" Func="AddCategory" />
}
else
{
    <h3>
        Categories
        <button class="btn btn-primary" @onclick="() => Creating = true">Create</button>
    </h3>

    <hr />

    @foreach (var c in categories)
    {
        <CategoryComponent Category="c" Click="(e) => Select(c)" Close="(e) => DeleteCategory(c)" />
    }
}

@code {
    private IEnumerable<ItemContainer> items = new List<ItemContainer>();
    private IEnumerable<CategoryContainer> categories = new List<CategoryContainer>();
    private CategoryContainer selectedCategory = null;
    private CategoryContainer category = new CategoryContainer
    {
        CategoryName = ""
    };

    private bool Creating = false;
    private bool Editing = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            category = new CategoryContainer();
            await RefreshCategories();
            await RefreshItems();
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task Select(CategoryContainer container)
    {
        selectedCategory = container;
        Editing = true;

        await RefreshItems();
    }

    private async Task RefreshCategories()
    {
        categories = await Http.GetFromJsonAsync<IEnumerable<CategoryContainer>>("Categories/list");
    }

    private async Task RefreshItems()
    {
        items = await Http.GetFromJsonAsync<IEnumerable<ItemContainer>>("Items/list");
    }

    private async Task AddCategory()
    {
        await Http.PostAsJsonAsync<CategoryContainer>("Categories/new", category);

        category = new CategoryContainer();

        await RefreshCategories();
    }

    private async Task UpdateCategory()
    {
        if (selectedCategory == null)
        {
            return;
        }

        await Http.PostAsJsonAsync<CategoryContainer>("Categories/update", selectedCategory);

        selectedCategory = null;

        await RefreshCategories();
    }

    private async Task DeleteCategory()
    {
        if (selectedCategory == null)
        {
            return;
        }

        await Http.PostAsJsonAsync<CategoryContainer>("Categories/delete", selectedCategory);

        selectedCategory = null;

        await RefreshCategories();
    }

    private async Task DeleteCategory(CategoryContainer category)
    {
        await Http.PostAsJsonAsync<CategoryContainer>("Categories/delete", category);

        await RefreshCategories();
    }

}
